name: ci

on:
  push:
    branches:
      - master
    tags:
      - '[0-9]+.*'
  pull_request:
  workflow_dispatch:

jobs:
  lint:
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true # needs fcitx5/.clang-format

      - name: Install dependencies
        run: brew install clang-format swift-format

      - name: Lint
        run: ./scripts/lint.sh

  build:
    needs: lint
    runs-on: macos-15
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: arm64, type: Release, postfix: '' }
          - { arch: arm64, type: Debug, postfix: -debug }
          - { arch: x86_64, type: Release, postfix: '' }
          - { arch: x86_64, type: Debug, postfix: -debug }

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest

      - uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Install dependencies
        env:
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
        run: |
          brew update && brew upgrade || true
          brew install \
            nlohmann-json \
            extra-cmake-modules \
            librsvg \
            md5sha1sum \
            ninja
          ./scripts/install-deps.sh ${{ matrix.arch }}
          npm i -g pnpm
          pnpm --prefix=fcitx5-webview i

      - name: Bypass download.fcitx-im.org
        run: wget -P fcitx5/src/modules/spell https://github.com/fcitx-contrib/fcitx5/releases/download/20241204/en_dict-20121020.tar.gz

      - name: Build
        run: |
          git fetch --tags -f
          # Don't log key on any CI artifact.
          cmake -B build/${{ matrix.arch }} -G Ninja \
            -DCMAKE_Swift_COMPILER=`which swiftc` \
            -DVERBOSE_LOGGING=OFF \
            -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.type }}
          cmake --build build/${{ matrix.arch }}
          sudo cmake --install build/${{ matrix.arch }}

      - name: Package and remove dev files
        run: |
          if [[ ${{ matrix.type }} == "Release" ]]; then
            tar cjf Fcitx5-${{ matrix.arch }}-dev.tar.bz2 -C "/Library/Input Methods" Fcitx5.app/Contents/{include,lib}
          fi
          sudo rm -rf "/Library/Input Methods/Fcitx5.app/Contents"/{bin/fcitx5-{configtool,diagnose},include,lib/{cmake,pkgconfig},share/{applications,metainfo}}
          tar cjf Fcitx5-${{ matrix.arch }}${{ matrix.postfix }}.tar.bz2 -C "/Library/Input Methods" Fcitx5.app
          ./scripts/code-sign.sh # after tar to avoid local signature in tarball

      - name: Test
        run: ctest --test-dir build/${{ matrix.arch }} --output-on-failure

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Fcitx5-${{ matrix.arch }}${{ matrix.postfix }}
          path: |
            Fcitx5-${{ matrix.arch }}*.tar.bz2

      - name: Check validity
        run: |
          ./scripts/check-validity.sh
          md5sum -c checksum

      # TODO: remove all meta.json stuff after 2026-03-02
      - name: Generate meta.json
        if: ${{ matrix.arch == 'arm64' && matrix.type == 'Release' }}
        run: |
          echo "{\"object\": {\"sha\": \"6dddc59c941ead66d0020ec7eef9dea85c401ffb\"}}" > meta.json

      - name: Upload meta.json
        if: ${{ matrix.arch == 'arm64' && matrix.type == 'Release' }}
        uses: actions/upload-artifact@v4
        with:
          name: meta.json
          path: |
            meta.json

      - name: Generate version.json
        if: ${{ matrix.arch == 'arm64' && matrix.type == 'Release' }}
        run: python scripts/generate-version.py

      - name: Upload version.json
        if: ${{ matrix.arch == 'arm64' && matrix.type == 'Release' }}
        uses: actions/upload-artifact@v4
        with:
          name: version.json
          path: |
            version.json

      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3

  compare:
    if: ${{ github.event_name == 'pull_request' }}
    needs: build
    uses: ./.github/workflows/compare.yml

  release:
    needs: build
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Create Nightly release
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: 'marvinpinto/action-automatic-releases@latest'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: latest
          prerelease: true
          title: "Nightly Build"
          files: |
            Fcitx5-*.tar.bz2
            meta.json
            version.json

      - name: Create Stable release
        if: ${{ github.ref != 'refs/heads/master' }}
        uses: 'marvinpinto/action-automatic-releases@latest'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          prerelease: false
          title: ${{ github.ref_name }}
          files: |
            Fcitx5-*.tar.bz2
