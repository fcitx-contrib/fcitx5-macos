name: ci

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

jobs:
  lint:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true # needs fcitx5/.clang-format

      - name: Install dependencies
        run: brew install clang-format swift-format

      - name: Lint
        run: |
          find macosfrontend macosnotifications webpanel src tests -name '*.cpp' -o -name '*.h' | xargs clang-format -Werror --dry-run -style=file:fcitx5/.clang-format
          clang-format -Werror --dry-run macosfrontend/pasteboard.mm
          swift-format lint --configuration .swift-format.json -rs macosfrontend macosnotifications src assets
          ./check-code-style.sh
          file assets/zh-Hans.lproj/Localizable.strings | grep UTF-16

  build:
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-14, macos-13]
        include:
          - { os: macos-14, arch: arm64 }
          - { os: macos-13, arch: x86_64 }

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest

      - uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install dependencies
        run: |
          brew install \
            nlohmann-json \
            extra-cmake-modules \
            librsvg \
            md5sha1sum \
            ninja
          ./install-deps.sh ${{ matrix.arch }}
          npm i -g pnpm
          pnpm --prefix=fcitx5-webview i

      - name: Build
        run: |
          cmake -B build -G Ninja \
            -DCMAKE_Swift_COMPILER=`which swiftc` \
            -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build build
          sudo cmake --install build
          tar cjvf Fcitx5-${{ matrix.arch }}.tar.bz2 -C "/Library/Input Methods" Fcitx5.app

      - name: Test
        run: |
          cd build
          ctest --output-on-failure

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Fcitx5-${{ matrix.arch }}.tar.bz2
          path: |
            Fcitx5-${{ matrix.arch }}.tar.bz2

      - name: Check validity
        run: |
          ./check-validity.sh
          md5sum -c checksum

      - name: Generate meta.json
        if: ${{ matrix.os == 'macos-14' }}
        run: |
          echo "{\"object\": {\"sha\": \"$(git rev-parse HEAD)\"}}" > meta.json

      - name: Upload meta.json
        if: ${{ matrix.os == 'macos-14' }}
        uses: actions/upload-artifact@v4
        with:
          name: meta.json
          path: |
            meta.json

      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3

  release:
    needs: build
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Create Nightly release
        uses: 'marvinpinto/action-automatic-releases@latest'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: latest
          prerelease: true
          title: "Nightly Build"
          files: |
            Fcitx5-x86_64.tar.bz2
            Fcitx5-arm64.tar.bz2
            meta.json
